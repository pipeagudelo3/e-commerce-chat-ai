from abc import ABC, abstractmethod
from typing import List, Optional
from .entities import Product, ChatMessage

class IProductRepository(ABC):
    @abstractmethod
    def get_all(self) -> List[Product]: ...
    @abstractmethod
    def get_by_id(self, product_id: int) -> Optional[Product]: ...
    @abstractmethod
    def get_by_brand(self, brand: str) -> List[Product]: ...
    @abstractmethod
    def get_by_category(self, category: str) -> List[Product]: ...
    @abstractmethod
    def save(self, product: Product) -> Product: ...
    @abstractmethod
    def delete(self, product_id: int) -> bool: ...

class IChatRepository(ABC):
    @abstractmethod
    def save_message(self, message: ChatMessage) -> ChatMessage: ...
    @abstractmethod
    def get_session_history(self, session_id: str, limit: Optional[int] = None) -> List[ChatMessage]: ...
    @abstractmethod
    def delete_session_history(self, session_id: str) -> int: ...
    @abstractmethod
    def get_recent_messages(self, session_id: str, count: int) -> List[ChatMessage]: ...
